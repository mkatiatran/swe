python
>>> range(1, 10, 2)
>>> list(range(1, 10, 2))
[1, 3, 5, 7, 9]

>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

range is a generator like object

mutable vs immutable

a = [1, 2, 3]
list = [1, 2, 3]

highly recommended NOT to use list as name of a list because it will cause an error
  you redefine list to be an object instead of a function
  
lists are mutable objects and can store many types of objects

you cannot change objects in tuples, bc it does not support item assignment

b = (2, 3, 4)
b = b + (9,)
b
(2, 3, 4, 9)
id(b) will return a different num for the first line and after you add 9 because a new object is returned

boolean operators: and, or, not (applied on truth values/boolean values)
bitwise operators: >>, <<, ~, |, & (applied on integral values)

2 * "abc" = "abcabc"

== is for equality
is, is for identity
a == b, is a equal to b value wise?

is, are a and b pointing to the same object?



with self.subTest()
  keeps going in a for loop of functions in unittest if one fails
  


t = timeit(
  f.__name__ + "(100)",     as if you're going to run the function with the parameter (100)
  number = 1000)            run the process a thousand times so we have a significant number after execution
  *1000                     go from microseconds to milliseconds



tail recursion
  function within a function
  pass the results of one recursive step to the next
  reuses the same frame, so reduces stacking frames
  
factorial while/range for
  does factorial with while and for loops
  
range reduce
  calls reduce function is a higher order function, meaning it receives another function as an input
  applies function in a sequence at a seed
  reduce(mul, (2, 3, 4), 1)
    operator, sequence, and seed
  starts at 1 mul 2 = 2
  2 mul 3 = 6
  6 mul 4 = 24


binary function
  takes in two inputs
  
a = {1, 2, 3}
  this is a set and is unordered and is therefore unindexable
  
reduce_for without the in range 
  you use 
  1. for w in a
  2. rather than for w in range(len(a))
  the former option does not require an indexable data structure
  the second option does
  

reduce_while
  p = iter(a), iter takes in an iterable object and returns an iterator of that
  what are iterables in python? things that you iterate through, ex a list
  iterables include generators (functions) or iterators (class)
    generating values on demand
    they are not indexable
    iterators and generators are lazy, exhaustible
      lazy because it only gets the next value ready, only 1 value available at a time
  benefits: less memory
  
      
    
hasattr(x, "__iter__")
  shows the attributes of a function
  this function means, is x iterable? = True
hasattr(x, "__next__")
  is x iterator/generator?
  False
hasattr(x, "__getitem__")
  if an object is indexable

y = iter(x)
hasattr(x, "__iter__")
  True
  
  
  
iter means everything that is iterable
an iterator is also an interable

hasattr(y, "__iter__")
  True
hasattr(y, "__next__") 
  True
hasattr(y, "__getitem__")
  False
  it is not indexable
  
if x = [1,2,3]
how can you get these values from y?
  next(y)
  will get 1
  next(y)
  will get 2
  next(y)
  will get 3
    exhausted
how to get all values?
  list(y)
  immediately exhausts it
  
