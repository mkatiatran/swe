characteristics of a generator
  - lazy, exhaustible

applying iter to an iterator/generator, it points to itself
if you apply it to a regular thing, it turns the regular object into an iterator

python's range is a generator-like object
range(begin, end)

iterator protocol
  iter and next functions MUST be implemented
  def __init__(self, ...)  # you receive the beginning and end 
  def __iter__(self)       
  def __next__(self)       # next method is a stepwise function
                           # you need to check if it's the end of the list, and raise an exception
                           # provide current value using return, prepare the next 

generator is actually an iterator under the hood,
but iterator is not necessarily a generator

x = range(4)
it is not exhaustible
type(x) = range class
range is a generator-like object

if x is a range object
when you apply iter(x), it is not the same as the range object
but when you apply iter to iter(x) it is the same object
listing list(x) does not exhaust it

when you loop over an iterable
  you get an iterator, and everytime you ask for next


i = [1,2,3]
for j in i:
  print(j)
notice how it's looping over i, an iterable
what happens under the hood?
i-i = iter(i)
while True 
  try 
    item = next(i-i)
    print(item)
  except StopIteration
    break





map and filter functions are generators
function vs a predicate
predicate only receives input and returns true or false
function receives input and returns output,


