def h1 (x = []) : # mutable default
    x += [2]
    return x

assert h1()    == [2]
assert h1()    == [2, 2]
assert h1([1]) == [1, 2]
assert h1()    == [2, 2, 2]
assert h1([1]) == [1, 2]


returns pointer to same object with no params
returns pointer to dif object with params

workaround:
def h3 (x = None) :
    if x is None :
        x = []
    x += [2]
    return x

assert h3()     == [2]
assert h3()     == [2]
assert h3([1])  == [1, 2]
assert h3()     == [2]
assert h3([1])  == [1, 2]
assert h3(None) == [2]






def h2 (x = ()) : # immutable default
    x += (2,)
    return x

assert h2()     == (2,)
assert h2()     == (2,)
assert h2((1,)) == (1, 2)
assert h2()     == (2,)
assert h2((1,)) == (1, 2)


default value must come first in python, nondefault values after it as params

rules:
which values get processed first in dict unpacking:
    {position f(2), iterunpacking}
    name f(x=2)
    dict unpacking

which values you must put first syntactically:
    position before name
    position before dict unpacking
    iter unpacking before dict unpacking

GENERAL
iterable unpacking
    iterable unpacking    
    name f(x=2)





def f (x, y, *z) :
    return [x, y, z]

assert f(2, 3)       == [2, 3, ()]
assert f(2, 3, 4)    == [2, 3, (4,)]
assert f(2, 3, 4, 5) == [2, 3, (4, 5)]




z* parameter is PACKING
empty *z = ()
4 passed into param *z = (4,)
4,5 passed into *z = (4,5)


PACKING, putting back the parentheses
t = (3, 4)
assert f(2, 5,  t)  == [2, 5, ((3, 4),)]
assert f(2, 5, *t)  == [2, 5, (3, 4)]

t alone is just (3, 4),
but *t is (3,4)
    
